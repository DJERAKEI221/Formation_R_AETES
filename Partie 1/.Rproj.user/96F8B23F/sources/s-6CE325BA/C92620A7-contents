#Installation du package GGPLOT2
install.packages("ggplot2")
library(ggplot2)
library(readr)
##########                          ##############
########### IMPORTATION DES DONNEES ##############
###########                         ##############

data_enzyme <- read_delim("C:/Users/Ahmad Bachir/Desktop/data_enzyme.txt", delim = "\t", escape_double = FALSE, trim_ws = TRUE)
View(data_enzyme)

################# CONSTRUCTION DE L'OBJET p ##############################

p <- ggplot(data=data_enzyme, aes(x=Time, y=Abs, colour=Cond, shape=Cond))
p <- p + geom_point(size=4)
print(p)

################ AJOUTER UN TITRE A NOTRE GRAPHE #########################

p <- p + ggtitle("My beautiful enzyme")
p
############### POUR TRACER  LE GRAPH AVEC UNE LIGNE #####################
p <- p + geom_line(size=2)
p

############# SI ON VEUT VOIR LA FREQUENCE DES MODALITES DE FACON EMPILEE ####

p <- ggplot(data=data_enzyme, aes(x=Time, y=Abs, fill=Cond)) + geom_bar(stat='identity')
p

############ SI L'ON VEUT JUXTAPOSER LE GRAPHE ##############################

p <- ggplot(data=data_enzyme, aes(x=Time, y=Abs, fill=Cond)) + geom_bar(stat='identity', position='dodge')
p

########### POUR ENREGISTRER LE GRAPHE SOUS UN FORMAT ######################

ggsave(plot=p, file="data_enzyme_plot_01.png")

########## GENERONS MAINTENANT D'AUTRES DONNEES DE FACON ALEATOIRE #############
nb.samples=100
df2 <- data.frame(id = rep(1:nb.samples, times=3), 
                condition = factor( rep(c("A","B","C"), each=nb.samples)), value = c(rnorm(nb.samples),
                rnorm(nb.samples, mean=.5, sd=2), rnorm(nb.samples, mean=2.1, sd=0.5)))

################TRACONS NOW UN HISTOGRAMME ######################################

p <- ggplot(df2, aes(x=value))
p <- p + geom_histogram(binwidth=.5, colour="black", fill="white")
p

################# SI ON VEUT DETERMINER LA MOYENNE DE LA DISTRIBUTION SUR LE GRAPHE
p <- p + geom_vline(aes(xintercept=mean(value, na.rm=T)), color="red", linetype="dashed", size=1)
p

################## Imaginons maintenant que l'on souhaite observer la 
################# r?partitions des valeurs pour chaque condition s?par?e. ###############


p <- ggplot(df2, aes(x=value, fill=condition))
p <- p + geom_histogram(binwidth=.5, colour="black")
p <- p + theme_bw()
p

#################POSSIBILITE DE LES SEPARER #################################
p <- p + facet_grid( . ~ condition)
p

p <- p + facet_grid( condition ~ .)
p

#################### ON PEUT AUSSI AFFICHER LE BOX PLOT ET DE VOIR LES VALEURS EXTREMES ######
p <- ggplot(data=df2, aes(x=condition, y=value, fill=condition))
p <- p + geom_boxplot()
p <- p + geom_jitter(position = position_jitter(width = .2))
p


############## ON VA GENERER ENCORE UNE DISTRIBUTION DE DONNEES EN UTILISANT LA FONCTION MVRNORM ######

library(MASS)
set.seed(123)
nb.samples <- 25
correlation.group.1 <- 0.65
m.data.group.1 <- mvrnorm(nb.samples, mu = c(10,5), Sigma = matrix(c(1,correlation.group.1,correlation.group.1,1), ncol = 2), empirical = TRUE)
correlation.group.2 <- 0.85
m.data.group.2 <- mvrnorm(nb.samples, mu = c(15,6), Sigma = matrix(c(1,correlation.group.2,correlation.group.2,1), ncol = 2), empirical = TRUE)
df <- data.frame(id = rep(1:nb.samples, times=2), condition = factor( rep(c("A","B"), each=nb.samples)), protein.1 = c(m.data.group.1[,1],m.data.group.2[,1]), protein.2 = c(m.data.group.1[,2],m.data.group.2[,2]))

############## GENERONS LE NUAGE DE POINTS###############################

p <- ggplot(data=df, aes(x=protein.1, y=protein.2))
p <- p + geom_point(size=4)
p

############## Puis ajoutons une courbe de r?gression ###################
p <- p + stat_smooth()
p

########### POUR SEPARER LES DIFFERENTES CONDITIONS ####################
p <- ggplot(data=df, aes(x=protein.1, y=protein.2, colour=condition, shape=condition))
p <- p + geom_point(size=4)
p

############# ON TRACE LA COURBE DE REGRESSION POUR CHAQUE CATEGORIE ##########
p <- p + stat_smooth(method = "lm")
p


################## Pour les matrice de correlation ############################
mydata <- mtcars[, c(1,3,4,5,6,7)]

head(mydata)

########### Matrice de correlation #################
cormat <- round(cor(mydata),2)
head(cormat)

################# Le package reshape est n?cessaire pour "fondre" la matrice de corr?lation: ###########
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)

################## VISUALISER LA MATRICE DE CORRELATION ##################
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()
